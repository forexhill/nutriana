-- ======================================================================
-- Canadian Nutrient File (CNF), 2010 (http://www.healthcanada.gc.ca/cnf)
-- This file was generated by http://github.com/m5n/nutriana
-- Run this SQL with an account that has admin priviledges, e.g.: sqlplus "/as sysdba" < canadian_nf_oracle.sql
-- ======================================================================

-- This script assumes you've already set up a database when you installed Oracle.
BEGIN EXECUTE IMMEDIATE 'CREATE USER food IDENTIFIED BY food'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -01920 THEN RAISE; END IF; END;
/
GRANT CONNECT, RESOURCE TO food;
CONNECT food/food;

-- Food Name. This is a principal file. It stores information about each food in the database. It contains a description of each food in English and French as well as dates and comments.
BEGIN EXECUTE IMMEDIATE 'DROP TABLE FOOD_NM CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE FOOD_NM (
    FD_ID NUMBER(8) NOT NULL,   -- Sequential number generated by the database identifying the food records. This is the primary key.
    FD_CODE NUMBER(8) NOT NULL,   -- Identifier code for the foods. In the 2007b version this was the FD_C
    FD_GRP_ID NUMBER(11) NOT NULL,   -- Sequential number generated by the database for the food groups
    FD_SRC_ID NUMBER(2) NOT NULL,   -- Sequential number generated by the database for the food sources.
    A_FD_NME VARCHAR2(200) NOT NULL,   -- Abbreviated food name in English
    A_FD_NMF VARCHAR2(200) NOT NULL,   -- Abbreviated food name in French
    L_FD_NME VARCHAR2(255) NOT NULL,   -- Complete food name in English
    L_FD_NMF VARCHAR2(255) NOT NULL,   -- Complete food name in French
    COUNTRY_C NUMBER(20),   -- Corresponds to the USDA NDB code
    FD_DT_ENT date NOT NULL,   -- Date the food name data was entered into the database
    FD_DT_PUB date,   -- Date the food name data was originally published
    SCI_NM VARCHAR2(100)   -- Scientific name of the food
);

-- Nutrient Amount. This is the main file. It uses information (by linking) from the FOOD_ NM table (among others) to identify which nutrients and amounts are recorded for that food.
BEGIN EXECUTE IMMEDIATE 'DROP TABLE NT_AMT CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE NT_AMT (
    FD_ID NUMBER(8) NOT NULL,   -- Sequential number generated by the database identifying the food records.
    NT_ID NUMBER(4) NOT NULL,   -- Sequential number generated by the database for the nutrient names
    NT_VALUE NUMBER(12, 5),   -- Mean value in 100g, edible portion. (The number of decimal places does not reflect the accuracy of the data.).
    STD_ERR NUMBER(8, 4),   -- Standard error of the mean
    NUM_OBS NUMBER(6),   -- Number of samples
    NT_SRC_ID NUMBER(15) NOT NULL,   -- Identifier code generated by the database for the nutrient source
    NT_DT_ENT date NOT NULL,   -- Date the data was entered into the database
    NT_TR VARCHAR2(1) NOT NULL   -- Trace nutrient identifier. The nutrient is likely present, but at a level below significant contribution to the diet or beneath a level that can be measured adequately.
);

-- Conversion Factor. This is a principal file. This file contains portion size conversion factors. The conversion factors are food specific multipliers by which the nutrient values for each food may be multiplied to give the nutrients in described portions.
BEGIN EXECUTE IMMEDIATE 'DROP TABLE CONV_FAC CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE CONV_FAC (
    FD_ID NUMBER(8) NOT NULL,   -- Sequential number generated by the database identifying the food records.
    MSR_ID NUMBER(10) NOT NULL,   -- Sequential number generated by the database for the measure descriptions
    CONV_FAC NUMBER(9, 5),   -- The factor by which one would multiply the nutrient per 100g to obtain nutrient amounts per the measure described (the weight of that food in the measure described divided by 100)
    CF_DT_ENT date NOT NULL   -- Date the data was entered into the database
);

-- Refuse Amount. This is a principal file. This file contains the percent of refuse, or inedible portion, for each food.
BEGIN EXECUTE IMMEDIATE 'DROP TABLE REFUSE CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE REFUSE (
    FD_ID NUMBER(8) NOT NULL,   -- Sequential number generated by the database identifying the food records.
    REFUSE_ID NUMBER(10) NOT NULL,   -- Sequential number generated by the database for the refuse descriptions
    REFUSE_AMT NUMBER(9, 5) NOT NULL,   -- Percent refuse
    CF_DT_ENT date NOT NULL   -- Date the data was entered into the database
);

-- Yield Amount. This is a principal file. This file contains the yield from refuse and/or cooking losses assigned to certain foods. These yields are most often used for food inventory purposes.
BEGIN EXECUTE IMMEDIATE 'DROP TABLE YIELD CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE YIELD (
    FD_ID NUMBER(8) NOT NULL,   -- Sequential number generated by the database identifying the food records.
    YLD_ID NUMBER(10) NOT NULL,   -- Sequential number generated by the database for the yield descriptions
    YLD_AMT NUMBER(9, 5),   -- Yield from refuse and/or cooking losses
    CF_DT_ENT date NOT NULL   -- Date the data was entered into the database
);

-- Food Group. This file is a support or "list" table that is used to link to the FOOD_NM table. It contains a list of 23 different group headings (in English and French) based on similar characteristics of the foods.
BEGIN EXECUTE IMMEDIATE 'DROP TABLE FOOD_GRP CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE FOOD_GRP (
    FD_GRP_ID NUMBER(15) NOT NULL,   -- Sequential number generated by the database for the food groups
    FD_GRP_COD NUMBER(15) NOT NULL,   -- Identifier code for the Canadian Nutrient File food groups. There are 23 different CNF food groups
    FD_GRP_NME VARCHAR2(200) NOT NULL,   -- Food group name in English
    FD_GRP_NMF VARCHAR2(200) NOT NULL   -- Food group name in French
);

-- Food Source. This file is a support or "list" table that is used to link to the FOOD_NM table. It contains a list of several food sources (in English and French) that foods can be grouped on.
BEGIN EXECUTE IMMEDIATE 'DROP TABLE FOOD_SRC CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE FOOD_SRC (
    FD_SRC_ID NUMBER(2) NOT NULL,   -- Sequential number generated by the database for the food sources
    FD_SRC_COD NUMBER(15) NOT NULL,   -- Identifier code for the food sources. Food sources give an indication as to Canadian content
    FD_SRC_NME VARCHAR2(200) NOT NULL,   -- Food Source description in English
    FD_SRC_NMF VARCHAR2(200) NOT NULL   -- Food Source description in French
);

-- Nutrient Name. This file is a support or "list" table that contains the list of nutrients (in English and French) used in the NT_AMT file, with which it is linked.
BEGIN EXECUTE IMMEDIATE 'DROP TABLE NT_NM CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE NT_NM (
    NT_ID NUMBER(4) NOT NULL,   -- Sequential number generated by the database for the nutrient names
    NT_COD NUMBER(15) NOT NULL,   -- Identifier code for nutrient name descriptions
    NT_SYM VARCHAR2(10) NOT NULL,   -- Nutrient symbol or abbreviation of the nutrients. They may differ from international nomenclature.
    UNIT VARCHAR2(8) NOT NULL,   -- Unit of measure (e.g., mg, g, mcg)
    NT_NME VARCHAR2(200) NOT NULL,   -- Nutrient name in English
    NT_NMF VARCHAR2(200) NOT NULL,   -- Nutrient name in French
    TAGNAME VARCHAR2(20),   -- International Network of Food Data Systems (INFOODS) Tagnames. A unique Abbreviation for a food component developed by INFOODS to aid in the interchange of data.
    NT_DEC NUMBER(15) NOT NULL   -- Number of decimal places used in the rounding of the nutrient value
);

-- Nutrient Source. This file is a support or "list" table that is used to link to the NT_AMT file. It contains a list of several sources and/or types of nutrient data (in English and French).
BEGIN EXECUTE IMMEDIATE 'DROP TABLE NT_SRC CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE NT_SRC (
    NT_SRC_ID NUMBER(15) NOT NULL,   -- Sequential number generated by the database for the nutrient sources
    NT_SRC_COD NUMBER(15) NOT NULL,   -- Identifier code for nutrient source descriptions.
    NT_SRC_NME VARCHAR2(200) NOT NULL,   -- Nutrient source description in English
    NT_SRC_NMF VARCHAR2(200) NOT NULL   -- Nutrient source description in French
);

-- Measure. This file is a support or "list" table that is used to link to the CONV_FAC table. It contains a list of measures (in English and French).
BEGIN EXECUTE IMMEDIATE 'DROP TABLE MEASURE CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE MEASURE (
    MSR_ID NUMBER(10) NOT NULL,   -- Sequential number generated by the database for the measure descriptions
    MSR_NME VARCHAR2(200) NOT NULL,   -- Measure description in English
    MSR_NMF VARCHAR2(200) NOT NULL   -- Measure description in French
);

-- Refuse Name. This file is a support or "list" table that is used to link to the REFUSE table. It contains a list of refuse types.
BEGIN EXECUTE IMMEDIATE 'DROP TABLE REFU_NM CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE REFU_NM (
    REFUSE_ID NUMBER(10) NOT NULL,   -- Sequential number generated by the database for the refuse descriptions
    REFUSE_NME VARCHAR2(200) NOT NULL,   -- Refuse description in English
    REFUSE_NMF VARCHAR2(200) NOT NULL   -- Refuse description in French
);

-- Yield Name. This file is a support or "list" table that is used to link to the YIELD table. It contains a list of yield types or yield descriptions (in English and French).
BEGIN EXECUTE IMMEDIATE 'DROP TABLE YLD_NM CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -00942 THEN RAISE; END IF; END;
/
CREATE TABLE YLD_NM (
    YLD_ID NUMBER(10) NOT NULL,   -- Sequential number generated by the database for the yield descriptions
    YLD_NME VARCHAR2(200) NOT NULL,   -- Yield description in English
    YLD_NMF VARCHAR2(200) NOT NULL   -- Yield description in French
);

-- Load data into FOOD_NM
HOST SQLLDR food/food control=../sqlldr/FOOD_NM.txt.trimmed;
-- Assert all 5807 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM FOOD_NM);
DELETE FROM tmp WHERE c = 5807;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Load data into NT_AMT
HOST SQLLDR food/food control=../sqlldr/NT_AMT.ctl;
-- Assert all 495878 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM NT_AMT);
DELETE FROM tmp WHERE c = 495878;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Load data into CONV_FAC
HOST SQLLDR food/food control=../sqlldr/CONV_FAC.ctl;
-- Assert all 22260 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM CONV_FAC);
DELETE FROM tmp WHERE c = 22260;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Load data into REFUSE
HOST SQLLDR food/food control=../sqlldr/REFUSE.ctl;
-- Assert all 7138 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM REFUSE);
DELETE FROM tmp WHERE c = 7138;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Load data into YIELD
HOST SQLLDR food/food control=../sqlldr/YIELD.ctl;
-- Assert all 1599 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM YIELD);
DELETE FROM tmp WHERE c = 1599;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Load data into FOOD_GRP
HOST SQLLDR food/food control=../sqlldr/FOOD_GRP.ctl;
-- Assert all 23 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM FOOD_GRP);
DELETE FROM tmp WHERE c = 23;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Load data into FOOD_SRC
HOST SQLLDR food/food control=../sqlldr/FOOD_SRC.ctl;
-- Assert all 17 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM FOOD_SRC);
DELETE FROM tmp WHERE c = 17;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Load data into NT_NM
HOST SQLLDR food/food control=../sqlldr/NT_NM.ctl;
-- Assert all 150 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM NT_NM);
DELETE FROM tmp WHERE c = 150;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Load data into NT_SRC
HOST SQLLDR food/food control=../sqlldr/NT_SRC.ctl;
-- Assert all 20 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM NT_SRC);
DELETE FROM tmp WHERE c = 20;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Load data into MEASURE
HOST SQLLDR food/food control=../sqlldr/MEASURE.ctl;
-- Assert all 1174 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM MEASURE);
DELETE FROM tmp WHERE c = 1174;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Load data into REFU_NM
HOST SQLLDR food/food control=../sqlldr/REFU_NM.ctl;
-- Assert all 151 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM REFU_NM);
DELETE FROM tmp WHERE c = 151;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Load data into YLD_NM
HOST SQLLDR food/food control=../sqlldr/YLD_NM.ctl;
-- Assert all 82 records were loaded
CREATE TABLE tmp (c NUMBER PRIMARY KEY);
INSERT INTO tmp (c) VALUES (2);
INSERT INTO tmp (SELECT COUNT(*) FROM YLD_NM);
DELETE FROM tmp WHERE c = 82;
INSERT INTO tmp (SELECT COUNT(*) FROM tmp);
DROP TABLE tmp;

-- Correct data inconsistencies, if any

-- Add primary keys
ALTER TABLE FOOD_NM ADD PRIMARY KEY (FD_ID);
ALTER TABLE FOOD_GRP ADD PRIMARY KEY (FD_GRP_ID);
ALTER TABLE FOOD_SRC ADD PRIMARY KEY (FD_SRC_ID);
ALTER TABLE NT_NM ADD PRIMARY KEY (NT_ID);
ALTER TABLE NT_SRC ADD PRIMARY KEY (NT_SRC_ID);
ALTER TABLE MEASURE ADD PRIMARY KEY (MSR_ID);
ALTER TABLE REFU_NM ADD PRIMARY KEY (REFUSE_ID);
ALTER TABLE YLD_NM ADD PRIMARY KEY (YLD_ID);

-- Add foreign keys
ALTER TABLE FOOD_NM ADD FOREIGN KEY (FD_GRP_ID) REFERENCES FOOD_GRP(FD_GRP_ID);
ALTER TABLE FOOD_NM ADD FOREIGN KEY (FD_SRC_ID) REFERENCES FOOD_SRC(FD_SRC_ID);
ALTER TABLE NT_AMT ADD FOREIGN KEY (FD_ID) REFERENCES FOOD_NM(FD_ID);
ALTER TABLE NT_AMT ADD FOREIGN KEY (NT_ID) REFERENCES NT_NM(NT_ID);
ALTER TABLE NT_AMT ADD FOREIGN KEY (NT_SRC_ID) REFERENCES NT_SRC(NT_SRC_ID);
ALTER TABLE CONV_FAC ADD FOREIGN KEY (FD_ID) REFERENCES FOOD_NM(FD_ID);
ALTER TABLE CONV_FAC ADD FOREIGN KEY (MSR_ID) REFERENCES MEASURE(MSR_ID);
ALTER TABLE REFUSE ADD FOREIGN KEY (FD_ID) REFERENCES FOOD_NM(FD_ID);
ALTER TABLE REFUSE ADD FOREIGN KEY (REFUSE_ID) REFERENCES REFU_NM(REFUSE_ID);
ALTER TABLE YIELD ADD FOREIGN KEY (FD_ID) REFERENCES FOOD_NM(FD_ID);
ALTER TABLE YIELD ADD FOREIGN KEY (YLD_ID) REFERENCES YLD_NM(YLD_ID);
