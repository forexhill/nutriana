-- ======================================================================
-- Canadian Nutrient File (CNF), 2010 (http://www.healthcanada.gc.ca/cnf)
-- This file was generated by http://github.com/m5n/nutriana
-- Run this SQL with an account that has admin priviledges, e.g.: mysql --local_infile=1 -v -u root < canadian_nf_mysql.sql
-- ======================================================================

drop database if exists canadian_nf;
create database canadian_nf;
use canadian_nf;
grant all on canadian_nf.* to 'food'@'localhost' identified by 'food';

-- Food Name. This is a principal file. It stores information about each food in the database. It contains a description of each food in English and French as well as dates and comments.
create table FOOD_NM (
    FD_ID int(8) unsigned not null,   -- Sequential number generated by the database identifying the food records. This is the primary key.
    FD_CODE int(8) unsigned not null,   -- Identifier code for the foods. In the 2007b version this was the FD_C
    FD_GRP_ID bigint(11) unsigned not null,   -- Sequential number generated by the database for the food groups
    FD_SRC_ID tinyint(2) unsigned not null,   -- Sequential number generated by the database for the food sources.
    A_FD_NME varchar(200) not null,   -- Abbreviated food name in English
    A_FD_NMF varchar(200) not null,   -- Abbreviated food name in French
    L_FD_NME varchar(255) not null,   -- Complete food name in English
    L_FD_NMF varchar(255) not null,   -- Complete food name in French
    COUNTRY_C bigint(20) unsigned,   -- Corresponds to the USDA NDB code
    FD_DT_ENT date not null,   -- Date the food name data was entered into the database
    FD_DT_PUB date,   -- Date the food name data was originally published
    SCI_NM varchar(100)   -- Scientific name of the food
);

-- Nutrient Amount. This is the main file. It uses information (by linking) from the FOOD_ NM table (among others) to identify which nutrients and amounts are recorded for that food.
create table NT_AMT (
    FD_ID int(8) unsigned not null,   -- Sequential number generated by the database identifying the food records.
    NT_ID smallint(4) unsigned not null,   -- Sequential number generated by the database for the nutrient names
    NT_VALUE dec(12, 5) unsigned,   -- Mean value in 100g, edible portion. (The number of decimal places does not reflect the accuracy of the data.).
    STD_ERR dec(8, 4) unsigned,   -- Standard error of the mean
    NUM_OBS mediumint(6) unsigned,   -- Number of samples
    NT_SRC_ID bigint(15) unsigned not null,   -- Identifier code generated by the database for the nutrient source
    NT_DT_ENT date not null,   -- Date the data was entered into the database
    NT_TR varchar(1) not null   -- Trace nutrient identifier. The nutrient is likely present, but at a level below significant contribution to the diet or beneath a level that can be measured adequately.
);

-- Conversion Factor. This is a principal file. This file contains portion size conversion factors. The conversion factors are food specific multipliers by which the nutrient values for each food may be multiplied to give the nutrients in described portions.
create table CONV_FAC (
    FD_ID int(8) unsigned not null,   -- Sequential number generated by the database identifying the food records.
    MSR_ID bigint(10) unsigned not null,   -- Sequential number generated by the database for the measure descriptions
    CONV_FAC dec(9, 5) unsigned,   -- The factor by which one would multiply the nutrient per 100g to obtain nutrient amounts per the measure described (the weight of that food in the measure described divided by 100)
    CF_DT_ENT date not null   -- Date the data was entered into the database
);

-- Refuse Amount. This is a principal file. This file contains the percent of refuse, or inedible portion, for each food.
create table REFUSE (
    FD_ID int(8) unsigned not null,   -- Sequential number generated by the database identifying the food records.
    REFUSE_ID bigint(10) unsigned not null,   -- Sequential number generated by the database for the refuse descriptions
    REFUSE_AMT dec(9, 5) unsigned not null,   -- Percent refuse
    CF_DT_ENT date not null   -- Date the data was entered into the database
);

-- Yield Amount. This is a principal file. This file contains the yield from refuse and/or cooking losses assigned to certain foods. These yields are most often used for food inventory purposes.
create table YIELD (
    FD_ID int(8) unsigned not null,   -- Sequential number generated by the database identifying the food records.
    YLD_ID bigint(10) unsigned not null,   -- Sequential number generated by the database for the yield descriptions
    YLD_AMT dec(9, 5) unsigned,   -- Yield from refuse and/or cooking losses
    CF_DT_ENT date not null   -- Date the data was entered into the database
);

-- Food Group. This file is a support or "list" table that is used to link to the FOOD_NM table. It contains a list of 23 different group headings (in English and French) based on similar characteristics of the foods.
create table FOOD_GRP (
    FD_GRP_ID bigint(15) unsigned not null,   -- Sequential number generated by the database for the food groups
    FD_GRP_COD bigint(15) unsigned not null,   -- Identifier code for the Canadian Nutrient File food groups. There are 23 different CNF food groups
    FD_GRP_NME varchar(200) not null,   -- Food group name in English
    FD_GRP_NMF varchar(200) not null   -- Food group name in French
);

-- Food Source. This file is a support or "list" table that is used to link to the FOOD_NM table. It contains a list of several food sources (in English and French) that foods can be grouped on.
create table FOOD_SRC (
    FD_SRC_ID tinyint(2) unsigned not null,   -- Sequential number generated by the database for the food sources
    FD_SRC_COD bigint(15) unsigned not null,   -- Identifier code for the food sources. Food sources give an indication as to Canadian content
    FD_SRC_NME varchar(200) not null,   -- Food Source description in English
    FD_SRC_NMF varchar(200) not null   -- Food Source description in French
);

-- Nutrient Name. This file is a support or "list" table that contains the list of nutrients (in English and French) used in the NT_AMT file, with which it is linked.
create table NT_NM (
    NT_ID smallint(4) unsigned not null,   -- Sequential number generated by the database for the nutrient names
    NT_COD bigint(15) unsigned not null,   -- Identifier code for nutrient name descriptions
    NT_SYM varchar(10) not null,   -- Nutrient symbol or abbreviation of the nutrients. They may differ from international nomenclature.
    UNIT varchar(8) not null,   -- Unit of measure (e.g., mg, g, mcg)
    NT_NME varchar(200) not null,   -- Nutrient name in English
    NT_NMF varchar(200) not null,   -- Nutrient name in French
    TAGNAME varchar(20),   -- International Network of Food Data Systems (INFOODS) Tagnames. A unique Abbreviation for a food component developed by INFOODS to aid in the interchange of data.
    NT_DEC bigint(15) unsigned not null   -- Number of decimal places used in the rounding of the nutrient value
);

-- Nutrient Source. This file is a support or "list" table that is used to link to the NT_AMT file. It contains a list of several sources and/or types of nutrient data (in English and French).
create table NT_SRC (
    NT_SRC_ID bigint(15) unsigned not null,   -- Sequential number generated by the database for the nutrient sources
    NT_SRC_COD bigint(15) unsigned not null,   -- Identifier code for nutrient source descriptions.
    NT_SRC_NME varchar(200) not null,   -- Nutrient source description in English
    NT_SRC_NMF varchar(200) not null   -- Nutrient source description in French
);

-- Measure. This file is a support or "list" table that is used to link to the CONV_FAC table. It contains a list of measures (in English and French).
create table MEASURE (
    MSR_ID bigint(10) unsigned not null,   -- Sequential number generated by the database for the measure descriptions
    MSR_NME varchar(200) not null,   -- Measure description in English
    MSR_NMF varchar(200) not null   -- Measure description in French
);

-- Refuse Name. This file is a support or "list" table that is used to link to the REFUSE table. It contains a list of refuse types.
create table REFU_NM (
    REFUSE_ID bigint(10) unsigned not null,   -- Sequential number generated by the database for the refuse descriptions
    REFUSE_NME varchar(200) not null,   -- Refuse description in English
    REFUSE_NMF varchar(200) not null   -- Refuse description in French
);

-- Yield Name. This file is a support or "list" table that is used to link to the YIELD table. It contains a list of yield types or yield descriptions (in English and French).
create table YLD_NM (
    YLD_ID bigint(10) unsigned not null,   -- Sequential number generated by the database for the yield descriptions
    YLD_NME varchar(200) not null,   -- Yield description in English
    YLD_NMF varchar(200) not null   -- Yield description in French
);

-- Load data into FOOD_NM
load data local infile '../data/FOOD_NM.txt.trimmed'
    into table FOOD_NM
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (FD_ID, FD_CODE, FD_GRP_ID, FD_SRC_ID, A_FD_NME, A_FD_NMF, L_FD_NME, L_FD_NMF, COUNTRY_C, @date1, @date2, SCI_NM)
    set
    FD_DT_ENT = str_to_date(@date1, '%d/%m/%Y'),
    FD_DT_PUB = str_to_date(@date2, '%d/%m/%Y');
-- Assert all 5807 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from FOOD_NM);
delete from tmp where c = 5807;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into NT_AMT
load data local infile '../data/NT_AMT.txt'
    into table NT_AMT
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (FD_ID, NT_ID, NT_VALUE, STD_ERR, NUM_OBS, NT_SRC_ID, @date1, NT_TR)
    set
    NT_DT_ENT = str_to_date(@date1, '%d/%m/%Y');
-- Assert all 495878 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from NT_AMT);
delete from tmp where c = 495878;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into CONV_FAC
load data local infile '../data/CONV_FAC.txt'
    into table CONV_FAC
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (FD_ID, MSR_ID, CONV_FAC, @date1)
    set
    CF_DT_ENT = str_to_date(@date1, '%d/%m/%Y');
-- Assert all 22260 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from CONV_FAC);
delete from tmp where c = 22260;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into REFUSE
load data local infile '../data/REFUSE.txt'
    into table REFUSE
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (FD_ID, REFUSE_ID, REFUSE_AMT, @date1)
    set
    CF_DT_ENT = str_to_date(@date1, '%d/%m/%Y');
-- Assert all 7138 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from REFUSE);
delete from tmp where c = 7138;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into YIELD
load data local infile '../data/YIELD.txt'
    into table YIELD
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (FD_ID, YLD_ID, YLD_AMT, @date1)
    set
    CF_DT_ENT = str_to_date(@date1, '%d/%m/%Y');
-- Assert all 1599 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from YIELD);
delete from tmp where c = 1599;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into FOOD_GRP
load data local infile '../data/FOOD_GRP.txt'
    into table FOOD_GRP
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (FD_GRP_ID, FD_GRP_COD, FD_GRP_NME, FD_GRP_NMF)
;
-- Assert all 23 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from FOOD_GRP);
delete from tmp where c = 23;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into FOOD_SRC
load data local infile '../data/FOOD_SRC.txt'
    into table FOOD_SRC
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (FD_SRC_ID, FD_SRC_COD, FD_SRC_NME, FD_SRC_NMF)
;
-- Assert all 17 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from FOOD_SRC);
delete from tmp where c = 17;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into NT_NM
load data local infile '../data/NT_NM.txt'
    into table NT_NM
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (NT_ID, NT_COD, NT_SYM, UNIT, NT_NME, NT_NMF, TAGNAME, NT_DEC)
;
-- Assert all 150 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from NT_NM);
delete from tmp where c = 150;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into NT_SRC
load data local infile '../data/NT_SRC.txt'
    into table NT_SRC
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (NT_SRC_ID, NT_SRC_COD, NT_SRC_NME, NT_SRC_NMF)
;
-- Assert all 20 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from NT_SRC);
delete from tmp where c = 20;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into MEASURE
load data local infile '../data/MEASURE.txt'
    into table MEASURE
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (MSR_ID, MSR_NME, MSR_NMF)
;
-- Assert all 1174 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from MEASURE);
delete from tmp where c = 1174;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into REFU_NM
load data local infile '../data/REFU_NM.txt'
    into table REFU_NM
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (REFUSE_ID, REFUSE_NME, REFUSE_NMF)
;
-- Assert all 151 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from REFU_NM);
delete from tmp where c = 151;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into YLD_NM
load data local infile '../data/YLD_NM.txt'
    into table YLD_NM
    fields terminated by '$' optionally enclosed by '"'
    lines terminated by '\r\n'
    ignore 1 lines
    (YLD_ID, YLD_NME, YLD_NMF)
;
-- Assert all 82 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from YLD_NM);
delete from tmp where c = 82;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Correct data inconsistencies, if any

-- Add primary keys
alter table FOOD_NM add primary key (FD_ID);
alter table FOOD_GRP add primary key (FD_GRP_ID);
alter table FOOD_SRC add primary key (FD_SRC_ID);
alter table NT_NM add primary key (NT_ID);
alter table NT_SRC add primary key (NT_SRC_ID);
alter table MEASURE add primary key (MSR_ID);
alter table REFU_NM add primary key (REFUSE_ID);
alter table YLD_NM add primary key (YLD_ID);

-- Add foreign keys
alter table FOOD_NM add foreign key (FD_GRP_ID) references FOOD_GRP(FD_GRP_ID);
alter table FOOD_NM add foreign key (FD_SRC_ID) references FOOD_SRC(FD_SRC_ID);
alter table NT_AMT add foreign key (FD_ID) references FOOD_NM(FD_ID);
alter table NT_AMT add foreign key (NT_ID) references NT_NM(NT_ID);
alter table NT_AMT add foreign key (NT_SRC_ID) references NT_SRC(NT_SRC_ID);
alter table CONV_FAC add foreign key (FD_ID) references FOOD_NM(FD_ID);
alter table CONV_FAC add foreign key (MSR_ID) references MEASURE(MSR_ID);
alter table REFUSE add foreign key (FD_ID) references FOOD_NM(FD_ID);
alter table REFUSE add foreign key (REFUSE_ID) references REFU_NM(REFUSE_ID);
alter table YIELD add foreign key (FD_ID) references FOOD_NM(FD_ID);
alter table YIELD add foreign key (YLD_ID) references YLD_NM(YLD_ID);
